const { geo } = require("../src/helper/db");

/**
 * @param { import("knex").Knex } knex
 * @returns { Promise<void> } 
 */
exports.seed = async function(knex) {
  // Deletes ALL existing entries
  const route_geom = await knex('routes_geometry').insert([
    { geom: geo.geomFromText("LINESTRING (107.71775421396504 -6.934725110684607, 107.71657885349008 -6.934174160461969, 107.71579527984011 -6.932398876411246, 107.71416691584876 -6.931762222820642, 107.71310174541833 -6.931456139363621, 107.71283239197615 -6.931137812568319, 107.71114281129339 -6.927672947834842, 107.71072653779184 -6.925873177107556, 107.70951444730206 -6.921183978545996, 107.70804524670834 -6.9190413943468485, 107.70562106572874 -6.916923296824263, 107.70282958460069 -6.914254249079039, 107.70131141065387 -6.914131815696229, 107.69940144988206 -6.914095085681387, 107.69668342878371 -6.91399713897514, 107.6914432799995 -6.912332044968946, 107.69095354646828 -6.912013718173644, 107.68958400335259 -6.910386508919923, 107.68838716540597 -6.908604956251305, 107.68776590601385 -6.907992833026705, 107.68534482161803 -6.906933037593064, 107.68176672492798 -6.9053937969673305, 107.68062397387793 -6.905160052434365, 107.67771515302324 -6.904783464020142, 107.67605621612954 -6.904742883372055, 107.6745822039039 -6.904579891635566, 107.67296645973347 -6.904934221497501, 107.67249874431572 -6.904806662747205, 107.6715987464664 -6.904353120523929, 107.67122315681276 -6.904232648370871, 107.66787828291606 -6.904207845280534, 107.66673734076063 -6.904151152502625, 107.66529521822258 -6.90401650715509, 107.66172711651289 -6.903623201008344, 107.66145073922058 -6.903509815452525, 107.66126648769237 -6.903343280417416, 107.66047278880164 -6.90236178669986, 107.66019641150933 -6.902269660935757, 107.65679484483479 -6.902138558886841, 107.65574248514486 -6.902120842393744, 107.65234091847032 -6.903906664897891, 107.64906691054604 -6.905621621429648, 107.64575038303835 -6.907407443933794, 107.6439503873397 -6.908314528380345, 107.64325590081032 -6.9087538974091425, 107.64344015233853 -6.911276726026109, 107.64363857706121 -6.913728688670689, 107.64021575059492 -6.914160971102248, 107.63609135100201 -6.914671206103432, 107.63490080266591 -6.9142672700608285, 107.6346811181515 -6.91452238756142, 107.63430552849789 -6.916712146108171, 107.63417088315035 -6.917130255345253, 107.63374568731602 -6.917456238818232, 107.6314141968245 -6.918653873751568, 107.63001105057124 -6.915805061661621, 107.62739609619018 -6.917130255345254, 107.62643940556295 -6.917668836735393, 107.62491578715664 -6.9184341892371695, 107.62288193374914 -6.91954678500364, 107.61952288665805 -6.921346780702263, 107.61758115901465 -6.922402683690825, 107.6109906235827 -6.921608984800094, 107.60962999691287 -6.921445993063604, 107.60748984454679 -6.921183788965774, 107.60644102815546 -6.921077490007193, 107.60667488586434 -6.918916077849398, 107.60770244246395 -6.919079069585888, 107.6083544094099 -6.9194971788229696, 107.60853866093811 -6.919624737573265, 107.6090134629531 -6.919723949934607, 107.60999141337204 -6.919709776740128, 107.615958328247 -6.920829459103839, 107.61774415075114 -6.921183788965774, 107.61781501672353 -6.920411349866758, 107.61916855679611 -6.921013710632045, 107.61946619388014 -6.92136095389674, 107.63000396397406 -6.915797975064383, 107.63332757807899 -6.913997979365762, 107.63465277176265 -6.913289319641895, 107.63974803517725 -6.910582239496722, 107.6438299151867 -6.9083924809499715, 107.65573539854768 -6.902120842393747, 107.66018578161356 -6.902269660935759, 107.66047633210034 -6.9023688732971005, 107.66137632994966 -6.903453122674617, 107.66163144745025 -6.903580681424913, 107.6617519196033 -6.9036302876055835, 107.66676214385105 -6.904161782398486, 107.67116292073626 -6.90423973496811, 107.67214087115521 -6.904579891635567, 107.67288496386527 -6.904934221497501, 107.67319677414378 -6.9049200483030235, 107.67453614102187 -6.9046082380245215, 107.67588259449724 -6.904728710177579, 107.6776188108207 -6.904778316358249, 107.6812117156207 -6.905246031776002, 107.68176447020535 -6.905366503929059, 107.68773847167755 -6.907967285115652, 107.6885392571655 -6.908760984006383, 107.6897652384878 -6.910638932274631, 107.69104791258799 -6.912112944500275, 107.69144476203336 -6.912325542417435, 107.69665341100381 -6.914005065962999, 107.69940301073241 -6.914111364921579, 107.70293213615726 -6.91426727006083, 107.70675181206892 -6.9180019068056104, 107.70801322637737 -6.9190223768079795, 107.70948015200578 -6.921112922993387, 107.71006833957661 -6.923061737234023, 107.7107840858977 -6.926023934879786, 107.71118093534307 -6.927703458425351, 107.71212345277581 -6.929751485027328, 107.71282502590243 -6.931140458086109, 107.71310848979198 -6.931416835378417, 107.7134415598622 -6.9316152601011, 107.71405809382196 -6.931778251837589, 107.71576596375648 -6.932387699200115, 107.71660218223064 -6.934138088718068, 107.7176935182054 -6.934740449483355)") }
  ]).returning(['id', geo.asText('geom')])
  console.log(route_geom[0].id)
  console.log(route_geom)
  await knex('routes').insert([
    { geometry: route_geom[0].id, code: "CAR123" },
  ]);
  await knex.raw(`
        DO $$
        DECLARE
        g geometry;
        BEGIN
        FOR g IN SELECT (ST_DUMPPOINTS(geom)).geom FROM routes_geometry
          LOOP
          insert into shelters_geometry (geom) values (g);
          END LOOP;
        END$$;
      `);
}
